---end scope---
print (STRING)->VOID 0
printi (INT)->VOID 0
readi (INT)->INT 0
x BOOL 0
declare void @exit(i32)
declare i32 @printf(i8*, ...)
declare i32 @scanf(i8*, ...)
@.int_specifier_scan = constant [3 x i8] c"%d\00"
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define i32 @readi(i32) {
    %ret_val = alloca i32
    %spec_ptr = getelementptr [3 x i8], [3 x i8]* @.int_specifier_scan, i32 0, i32 0
    call i32 (i8*, ...) @scanf(i8* %spec_ptr, i32* %ret_val)
    %val = load i32, i32* %ret_val
    ret i32 %val
}
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.MessageDivError = constant[23 x i8] c"Error division byÂ zero\00"
define void @checkIfDivisionBy0(i32) {
%t2= icmp eq i32 %0,0
br i1 %t2,label %zeroLabel,label %notZero
zeroLabel:
%t3= getelementptr [23 x i8], [23 x i8]* @.MessageDivError, i32 0, i32 0
call void @print(i8* %t3)
call void @exit(i32 0)
ret void
notZero:
ret void
}
define i32 @main() {
%t4= add i32 50,0
%t5= alloca i32, i32 %t4
br label label_3
label_2:
br label label_4
label_3:
br label label_7
label_5:
br label label_7
label_4:
br label label_6
ret i32 0
}
