%{
    #include <stdio.h>
    #include "symbol_table.h"
    #include "hw3_output.hpp"
    #include "llvmCodeGen.h"
    #include "cg.hpp"
    #include "types.h"
    #include <iostream>
    extern int yylineno;
    extern char* yytext;
    extern llvmCodeGen* cg;
    extern std::vector<WhileLabels*> whiles;
    int yylex();
    CodeBuffer &cb= CodeBuffer::instance();
     symbolTable* table;
     llvmCodeGen* cgen;
    int yyerror(const char* message);
    extern int isLoop;
     using namespace output;
     using namespace std;
%}


    %right ASSIGN
    %left OR
    %left AND
    %left RELOP_EQUAL
    %left RELOP_GREATER
    %left ADD_SUB
    %left MULT_DIV
	%right NOT
    %left  RPAREN
    %right LPAREN
    %left RBRACE
    %right LBRACE
    %left IF
    %right ELSE
    %nonassoc STRING INT NUM BYTE BOOL ID B TRUE FALSE CONST SC CONTINUE BREAK RETURN WHILE

%%
Program: Statements                                                 {}

Statements: Statement                                               {}
            | Statements Statement                                  {}
            ;

Statement: LBRACE  OPENSUBTABLE Statements RBRACE CLOSESUBTABLE                              {}
           |  Type M3 ID SC                                             {checkIfCanDefine($3->name); table->SubTables.back()->addSymbol($3->name,$1->name,1); int offset=table->getOffset($3->name); emitStoreDefault($$,offset);}
           | Type M3 ID ASSIGN Exp SC { checkIfCanDefine($3->name); table->SubTables.back()->addSymbol($3->name,$1->name,1);Node* node= checkIfLegalCastingWithBool($3,$5); int offset=table->getOffset($3->name); if($5->name=="BOOL"||(dynamic_cast<IDClass*>($5) &&table->checkIfBool($5->name))){emitPhiVal($5); } emitStore($5,offset);}
           | ID M3 ASSIGN Exp SC                                       {checkIfDefinedID($1); Node* node=checkIfLegalCastingWithBool($1,$4); int offset=table->getOffset($1->name); if($4->name=="BOOL"||(dynamic_cast<IDClass*>($4) && table->checkIfBool($4->name))){emitPhiVal($4);} emitStore($4,offset); }
           | Call SC                                                {$$ = $1;}
           | RETURN SC                                              {cb.emit("ret i32 0");}
           |  IF M3 LPAREN CHECKIFBOOL RPAREN OPENSUBTABLE Statement M2 CLOSESUBTABLE ELSE OPENSUBTABLE {cb.emit("br label %"+$4->f_label); cb.emit($4->f_label+":");} Statement CLOSESUBTABLE { $$=new Node("");  $$->n_label= $8->n_label; cb.emit("br label %"+$$->n_label); cb.emit($$->n_label+":");}
           |  IF M3 LPAREN CHECKIFBOOL RPAREN OPENSUBTABLE Statement M2 CLOSESUBTABLE {$$=new Node(""); $$->n_label=$8->n_label; cb.emit($4->f_label+":"); cb.emit("br label %"+$$->n_label); cb.emit($$->n_label+":"); }
           |  WHILE {emitPrepForWhile();} LPAREN Exp {checkIfBool($4); editLabelsOfWhile($4);} RPAREN OPENSUBTABLE {isLoop++;} Statement CLOSESUBTABLE  {isLoop--; emitEndOfWhile();}
           | BREAK SC                                               {if(!isLoop) {errorUnexpectedBreak(yylineno);exit(0);} cb.emit("br label %" + cg->whiles.back()->f_label);}
           | CONTINUE SC                                            {if(!isLoop) { errorUnexpectedContinue(yylineno);exit(0);} cb.emit("br label %" + cg->whiles.back()->t_label);}
           ;

Call: ID LPAREN Exp RPAREN                                         {$$=table->checkIfLegalFunction($1->name,$3); emitFunctionCall($$,$1,$3); }
;

Type: INT                                                           {$$= new Num($1->name); }
      | BYTE                                                        {$$= new NumB($1->name);}
      | BOOL                                                        {$$= new Bool($1->name);}
      ;

Exp: LPAREN Exp RPAREN                                              {$$=$2;}
     | Exp ADD_SUB Exp                                              {checkIfOpIsIntOrByte($1);checkIfOpIsIntOrByte($3);createRes($1,$3,$$); emitBinop($1,$3,$2,$$); }
     | Exp MULT_DIV Exp                                             {checkIfOpIsIntOrByte($1);checkIfOpIsIntOrByte($3);createRes($1,$3,$$); emitBinop($1,$3,$2,$$); }
     | ID                                                           {checkIfDefinedID($1); $$= new IDClass($1); table->getOffset($1->name); int offset=table->getOffset($1->name);  if(table->checkIfBool($1->name)){$$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel(); }  emitLocalVar($$,offset); if(table->checkIfBool($1->name)) {emitPrepForBool($$);} }
     | Call                                                         { $$=new Node($1); }
     | NUM                                                          {$$ = new Num($1->name); emitNum($$);  $$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel();}
     | NUM B                                                        {checkIfLegalByte($1->name); $$ = new NumB($1->name); emitNumB($$);  $$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel();}
     | STRING                                                       {$$ = new STRINGClass($1->name); emitString($$);}
     | TRUE                                                         {$$ = new Bool($1->name); $$->t_label=cb.freshLabel();$$->f_label=cb.freshLabel();  cb.emit("br label %"+$$->t_label);}
     | FALSE                                                        {$$ = new Bool($1->name);$$->t_label=cb.freshLabel();$$->f_label=cb.freshLabel(); cb.emit("br label %"+$$->f_label);}
     | NOT Exp                                                      { checkIfBool($2); string realVal= ($2->value=="false")? "true":"false"; $$=new Bool(realVal); $$->t_label=$2->f_label; $$->f_label=$2->t_label; }
     | Exp AND {/*cb.emit("br label %"+$1->t_label);*/ /* if(dynamic_cast<IDClass*>($1) && table->checkIfBool($1->name)) {emitPrepForBool($1);} */  cb.emit($1->t_label+":"); } Exp                                                  {checkIfAndOperandsAreBool($1,$4); string realVal= calculateOp1AndOp2($1,$4); $$=new Bool(realVal); $$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel(); /* cb.emit("br label %"+$$->f_label); */ /* if(dynamic_cast<IDClass*>($4) && table->checkIfBool($4->name)) {emitPrepForBool($4);} */ cb.emit($1->f_label+":"); cb.emit("br label %"+$$->f_label); cb.emit($4->f_label+":"); cb.emit("br label %"+$$->f_label); cb.emit($4->t_label+":"); cb.emit("br label %"+$$->t_label); }
     | Exp OR {/*cb.emit("br label %"+$1->f_label);*/  /* if(dynamic_cast<IDClass*>($1) && table->checkIfBool($1->name)) {emitPrepForBool($1);} */  cb.emit($1->f_label+":");} Exp                                                   {checkIfAndOperandsAreBool($1,$4); string realVal= calculateOp1OrOp2($1,$4); $$=new Bool(realVal); $$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel(); /* cb.emit("br label %"+$$->f_label); */ /* if(dynamic_cast<IDClass*>($4) && table->checkIfBool($4->name)) {emitPrepForBool($4);} */cb.emit($1->t_label+":"); cb.emit("br label %"+$$->t_label); cb.emit($4->f_label+":"); cb.emit("br label %"+$$->f_label); cb.emit($4->t_label+":"); cb.emit("br label %"+$$->t_label);}
     | Exp RELOP_GREATER Exp                                        {checkIfOpIsIntOrByte($1); checkIfOpIsIntOrByte($3);   $$=new Bool("false");  /*$$->t_label=$3->t_label; $$->f_label=$3->f_label;*/ $$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel(); $$->nodereg=cb.freshVar(); emitRelop($1,$3,$2,$$); }
     | Exp RELOP_EQUAL Exp                                          {checkIfOpIsIntOrByte($1); checkIfOpIsIntOrByte($3);  $$=new Bool("false"); /*$$->t_label=$3->t_label; $$->f_label=$3->f_label;*/ $$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel(); $$->nodereg=cb.freshVar(); emitRelop($1,$3,$2,$$);}
     | LPAREN Type RPAREN Exp                                       {checkIfOpIsIntOrByte($2); checkIfOpIsIntOrByte($4); $$=checkIfLegalCasting($2,$4); $$->t_label=$4->t_label; $$->f_label=$4->f_label; $$->nodereg=cb.freshVar(); emitConversion($$->nodereg,$2,$4); }
     ;

     OPENSUBTABLE : {table->addSubTable();}
     ;
     CLOSESUBTABLE : {table->removeSubTable();}
     ;
     CHECKIFBOOL: Exp {checkIfBool($1); $$=new Bool("false"); $$->t_label= $1->t_label; $$->f_label=$1->f_label; cb.emit("br label %"+$$->t_label); cb.emit($$->t_label+":"); }
     ;
     M2 : {$$=new Node(""); $$->n_label=cb.freshLabel(); cb.emit("br label %"+$$->n_label);}
     ;
     M3 : {emitPrepForIf();}
     ;


%%

int main(){

       table=  new symbolTable();
        llvmCodeGen* cgen= new llvmCodeGen();
        emitInitial();
     int n=yyparse();
        table->removeSubTable();
        closeMain();
        cb.printGlobalBuffer();
        cb.printCodeBuffer();
        return n;
}

int yyerror(const char * message){
	errorSyn(yylineno);
	exit(0);
}