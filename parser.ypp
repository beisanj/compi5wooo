%{
    #include <stdio.h>
    #include "symbol_table.h"
    #include "hw3_output.hpp"
    #include "llvmCodeGen.h"
    #include "cg.hpp"
    #include "types.h"
    #include <iostream>
    extern int yylineno;
    extern char* yytext;
    int yylex();
    CodeBuffer &cb= CodeBuffer::instance();
     symbolTable* table;
     llvmCodeGen* cgen;
    int yyerror(const char* message);
    extern bool isLoop;
     using namespace output;
     using namespace std;
%}


    %right ASSIGN
    %left OR
    %left AND
    %left RELOP_EQUAL
    %left RELOP_GREATER
    %left ADD_SUB
    %left MULT_DIV
	%right NOT
    %left  RPAREN
    %right LPAREN
    %left RBRACE
    %right LBRACE
    %left IF
    %right ELSE
    %nonassoc STRING INT NUM BYTE BOOL ID B TRUE FALSE CONST SC CONTINUE BREAK RETURN WHILE

%%
Program: Statements                                                 {}

Statements: Statement                                               {}
            | Statements Statement                                  {}
            ;

Statement: LBRACE  OPENSUBTABLE Statements RBRACE CLOSESUBTABLE                              {}
           | Type ID SC                                             {checkIfCanDefine($2->name);   table->SubTables.back()->addSymbol($2->name,$1->name,1);}
           | Type ID ASSIGN Exp SC {  checkIfCanDefine($2->name);  table->SubTables.back()->addSymbol($2->name,$1->name,1);  Node* node= checkIfLegalCastingWithBool($2,$4);}
           | ID ASSIGN Exp SC                                       {checkIfDefinedID($1); Node* node=checkIfLegalCastingWithBool($1,$3); }
           | Call SC                                                {$$ = $1;}
           | RETURN SC                                              {}
           | IF LPAREN CHECKIFBOOL RPAREN OPENSUBTABLE Statement CLOSESUBTABLE ELSE OPENSUBTABLE Statement CLOSESUBTABLE {}
           | IF LPAREN CHECKIFBOOL RPAREN OPENSUBTABLE  Statement CLOSESUBTABLE {}
           | WHILE LPAREN Exp {checkIfBool($3);} RPAREN OPENSUBTABLE {isLoop=true;} Statement CLOSESUBTABLE  {isLoop=false;}
           | BREAK SC                                               {if(!isLoop) {errorUnexpectedBreak(yylineno);exit(0);}}
           | CONTINUE SC                                            {if(!isLoop) { errorUnexpectedContinue(yylineno);exit(0);}}
           ;

Call: ID LPAREN Exp RPAREN                                         {$$=table->checkIfLegalFunction($1->name,$3); }
;

Type: INT                                                           {$$= new Num($1->name); }
      | BYTE                                                        {$$= new NumB($1->name);}
      | BOOL                                                        {$$= new Bool($1->name);}
      ;

Exp: LPAREN Exp RPAREN                                              {$$=$2;}
     | Exp ADD_SUB Exp                                              {checkIfOpIsIntOrByte($1);checkIfOpIsIntOrByte($3);createRes($1,$3,$$); emitBinop($1,$3,$2,$$); }
     | Exp MULT_DIV Exp                                             {checkIfOpIsIntOrByte($1);checkIfOpIsIntOrByte($3);createRes($1,$3,$$); emitBinop($1,$3,$2,$$); }
     | ID                                                           { checkIfDefinedID($1); $$= new IDClass($1);}
     | Call                                                         { $$=new Node($1); }
     | NUM                                                          {$$ = new Num($1->name); emitNum($$);}
     | NUM B                                                        {checkIfLegalByte($1->name); $$ = new NumB($1->name); emitNum($$);}
     | STRING                                                       {$$ = new STRINGClass($1->name);}
     | TRUE                                                         {$$ = new Bool($1->name); $$->t_label=cb.freshLabel();$$->f_label=cb.freshLabel(); }
     | FALSE                                                        {$$ = new Bool($1->name);$$->t_label=cb.freshLabel();$$->f_label=cb.freshLabel();}
     | NOT Exp                                                      { checkIfBool($2); string realVal= ($2->value=="false")? "true":"false"; $$=new Bool(realVal); $$->t_label=$2->f_label; $$->f_label=$2->t_label; }
     | Exp AND {cb.emit($1->t_label+":");} Exp                                                  {checkIfAndOperandsAreBool($1,$4); string realVal= calculateOp1AndOp2($1,$4); $$=new Bool(realVal); $$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel(); cb.emit($1->f_label+":"); cb.emit("br label "+$$->f_label); cb.emit($4->f_label+":"); cb.emit("br label "+$$->f_label); cb.emit($4->t_label+":"); cb.emit("br label "+$$->t_label); }
     | Exp OR {cb.emit($1->f_label+":");} Exp                                                   {checkIfAndOperandsAreBool($1,$4); string realVal= calculateOp1OrOp2($1,$4); $$=new Bool(realVal); $$->t_label=cb.freshLabel(); $$->f_label=cb.freshLabel(); cb.emit($1->t_label+":"); cb.emit("br label "+$$->t_label); cb.emit($4->f_label+":"); cb.emit("br label "+$$->f_label); cb.emit($4->t_label+":"); cb.emit("br label "+$$->t_label);}
     | Exp RELOP_GREATER Exp                                        {checkIfOpIsIntOrByte($1); checkIfOpIsIntOrByte($3);   $$=new Bool("false");  $$->t_label=$2->f_label; $$->f_label=$2->t_label; emitRelop($1,$3,$2,$$); }
     | Exp RELOP_EQUAL Exp                                          {checkIfOpIsIntOrByte($1); checkIfOpIsIntOrByte($3);  $$=new Bool("false"); $$->t_label=$2->f_label; $$->f_label=$2->t_label;  /*calculateResOfComparison($1,$2,$3);*/emitRelop($1,$3,$2,$$);}
     | LPAREN Type RPAREN Exp                                       {checkIfOpIsIntOrByte($2); checkIfOpIsIntOrByte($4); $$=checkIfLegalCasting($2,$4); }
     ;

     OPENSUBTABLE : {table->addSubTable();}
     ;
     CLOSESUBTABLE : {table->removeSubTable();}
     ;
     CHECKIFBOOL: Exp {checkIfBool($1); $$=new Bool("false");}
     ;
%%

int main(){

       table=  new symbolTable();
        llvmCodeGen* cgen= new llvmCodeGen();
        emitInitial();
     int n=yyparse();
        table->removeSubTable();
        closeMain();
        cb.printCodeBuffer();
        cb.printGlobalBuffer();
        return n;
}

int yyerror(const char * message){
	errorSyn(yylineno);
	exit(0);
}